/* generated by dia/codegen.py */
class record : item 
{
};

/*static list in an Item type*/
class countries 
{
public:
	 updateVat (double country);
	 updatePostagePrice (double country);
	double getVAT (string country);
	double getPostagePrice (string country);
private:
	MapOfCountrynamesAndDoublesAndDoubles postagePricesVATs;
};

class item 
{
public:
	double getName ();
	double getPrice ();
	double getPostalFee ();
	int getStockStatus ();
	string getItemType ();
	Country getCountry (string country);
	double getVAT (string country);
	double getPostagePrice (string country);
	 removeCountry (string name);
	void for all setters for all but item type ( various);
private:
	string name;
	double price;
	double postalFee;
	int stockAmount;
};

class book : item 
{
};

class videoCassette : item 
{
};

class inventory 
{
public:
	 printAllOrdersInStock ();
	 printAllOfOrdersNotInStock ();
	 printFullStockStatus ();
	 printOrder (int orderNo);
	Item query (string Item.name);
	Order query (int OrderNo);
	 addItem (Item item);
	Item getItem (string name);
	 removeItem ( name:string);
	 setPostagePrice (string country,
	                  string itemType);
	 setVAT (string country,
	         string itemType);
	 setPrice (double item.price,
	           string item.name);
	 setStockAmount (int amount,
	                 string item.name);
};

class audioCassette : item 
{
};

/*Save collectedItems to list - if list is complete then ship. if list is not complete make purchases to inventory. collectedItems list should be persistent and shipped when complete

compare order to inventory -> (isPossibleToShip, is there enough stuff in the inventory)*/
class order 
{
public:
	boolean isPossibleToShip ();
	 collectShipPrint ();
	listOfItems getItemstoBeOrdered ();
	 printOrder ();
	int orderNo;
	string customer;
	string address;
};

